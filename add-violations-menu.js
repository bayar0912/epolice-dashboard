const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function addViolationsMenu() {
  try {
    // Check if violations menu already exists
    const existingMenu = await prisma.menu.findFirst({
      where: {
        path: '/violations'
      }
    })
    
    if (existingMenu) {
      console.log('‚ÑπÔ∏è  –ó”©—Ä—á–ª–∏–π–Ω —Ö—ç—Ä–≥–∏–π–Ω —Ü—ç—Å –∞–ª—å —Ö—ç–¥–∏–π–Ω –±–∞–π–Ω–∞, –Ω—ç—Ä–∏–π–≥ —à–∏–Ω—ç—á–∏–ª–∂ –±–∞–π–Ω–∞...')
      await prisma.menu.update({
        where: { id: existingMenu.id },
        data: {
          name: '–ó”©—Ä—á–ª–∏–π–Ω —Ö—ç—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª'
        }
      })
    } else {
      console.log('üÜï –ó”©—Ä—á–ª–∏–π–Ω —Ö—ç—Ä–≥–∏–π–Ω —Ü—ç—Å “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...')
      await prisma.menu.create({
        data: {
          name: '–ó”©—Ä—á–ª–∏–π–Ω —Ö—ç—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª',
          path: '/violations',
          roles: 'admin,superadmin,readwrite,readonly'
        }
      })
    }
    
    // Check if rejected cases menu exists
    const rejectedMenu = await prisma.menu.findFirst({
      where: {
        path: '/rejected-cases'
      }
    })
    
    if (!rejectedMenu) {
      console.log('üÜï –¢–∞—Ç–≥–∞–ª–∑—Å–∞–Ω –±“Ø—Ä—Ç–≥—ç–ª–∏–π–Ω —Ü—ç—Å “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...')
      await prisma.menu.create({
        data: {
          name: '–¢–∞—Ç–≥–∞–ª–∑—Å–∞–Ω –±“Ø—Ä—Ç–≥—ç–ª',
          path: '/rejected-cases',
          roles: 'admin,superadmin,readwrite,readonly'
        }
      })
    }
    
    console.log('‚úÖ –¶—ç—Å“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç!')
    
    // List all menus to verify
    const menus = await prisma.menu.findMany({
      orderBy: { id: 'asc' }
    })
    
    console.log('\nüìã –û–¥–æ–æ–≥–∏–π–Ω —Ü—ç—Å“Ø“Ø–¥:')
    menus.forEach(menu => {
      console.log(`  ‚Ä¢ ${menu.name} (${menu.path})`)
    })
    
  } catch (error) {
    console.error('‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

addViolationsMenu()
